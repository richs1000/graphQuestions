var _user$project$GraphQuestions$subscriptions = function (model) {
	return _user$project$Ports$ssData(_user$project$Types$GetValuesFromSS);
};
var _user$project$GraphQuestions$view = function (model) {
	var resetBtn = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Types$Reset),
				_user$project$View$buttonStyle
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Reset')
			]));
	var buttons = model.debug ? A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				resetBtn,
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$ToggleWeighted),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Toggle Weighted')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$ToggleDirectional),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Toggle Directional')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$BreadthFirstSearch),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('BFS')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$UpdateMastery),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Mastery')
					]))
			])) : A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[resetBtn]));
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h1,
				_elm_lang$core$Native_List.fromArray(
					[_user$project$View$scoreboardStyle]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Mastery Quiz')
					])),
				_user$project$GraphView$imageOfGraph(model),
				_user$project$QuestionView$questionForm(model),
				_user$project$HistoryView$historySection(model),
				buttons,
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model))
					]))
			]));
};
var _user$project$GraphQuestions$initModel = {
	graph: _user$project$Types$emptyGraph,
	debug: true,
	userInput: '',
	history: _elm_lang$core$Native_List.fromArray(
		[]),
	bfs: _elm_lang$core$Maybe$Nothing,
	success: _elm_lang$core$Maybe$Nothing,
	question: _user$project$Types$emptyQuestion,
	feedback: '',
	randomValues: _elm_lang$core$Native_List.fromArray(
		[]),
	mastery: false,
	numerator: 3,
	denominator: 5
};
var _user$project$GraphQuestions$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p0 = model.graph;
			var nodes = _p0.nodes;
			var edges = _p0.edges;
			var directed = _p0.directed;
			var weighted = _p0.weighted;
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'Reset':
					return {
						ctor: '_Tuple2',
						_0: _user$project$GraphQuestions$initModel,
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$Types$NewRandomValues,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
				case 'NewRandomValues':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{randomValues: _p1._0}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$Types$NewNodes,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
				case 'NewNodes':
					var newNodes$ = _elm_lang$core$Set$toList(
						_elm_lang$core$Set$fromList(_p1._0));
					var newEdges = _user$project$Graph$createAllEdges(newNodes$);
					return {
						ctor: '_Tuple2',
						_0: A5(_user$project$Graph$updateGraph, model, newNodes$, newEdges, directed, weighted),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$Types$NewEdgeWeights,
							A2(
								_elm_lang$core$Random$list,
								_elm_lang$core$List$length(newEdges),
								A2(_elm_lang$core$Random$int, -2, 5)))
					};
				case 'NewEdgeWeights':
					var newEdges = A2(_user$project$Graph$replaceWeights, edges, _p1._0);
					return {
						ctor: '_Tuple2',
						_0: A5(_user$project$Graph$updateGraph, model, nodes, newEdges, directed, weighted),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$Types$NewQuestion,
							A2(_elm_lang$core$Random$int, 1, 8))
					};
				case 'NewQuestion':
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Question$newQuestion, model, _p1._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UserInput':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{userInput: _p1._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'Submit':
					if (_elm_lang$core$String$isEmpty(model.userInput)) {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _v1 = _user$project$Types$CheckMastery,
							_v2 = _user$project$Question$checkAnswer(model);
						msg = _v1;
						model = _v2;
						continue update;
					}
				case 'CheckMastery':
					if (_user$project$Question$masteryAchieved(model)) {
						var _v3 = _user$project$Types$UpdateMastery,
							_v4 = _elm_lang$core$Native_Utils.update(
							model,
							{mastery: true});
						msg = _v3;
						model = _v4;
						continue update;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mastery: false}),
							_1: A2(
								_elm_lang$core$Random$generate,
								_user$project$Types$NewRandomValues,
								A2(
									_elm_lang$core$Random$list,
									15,
									A2(_elm_lang$core$Random$int, 1, 15)))
						};
					}
				case 'ToggleWeighted':
					return {
						ctor: '_Tuple2',
						_0: A5(
							_user$project$Graph$updateGraph,
							model,
							nodes,
							edges,
							directed,
							_elm_lang$core$Basics$not(weighted)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ToggleDirectional':
					return {
						ctor: '_Tuple2',
						_0: A5(
							_user$project$Graph$updateGraph,
							model,
							nodes,
							edges,
							_elm_lang$core$Basics$not(directed),
							weighted),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'BreadthFirstSearch':
					var lastNode = _elm_lang$core$List$head(
						_elm_lang$core$List$reverse(nodes));
					var firstNode = _elm_lang$core$List$head(nodes);
					var _p2 = firstNode;
					if (_p2.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p3 = lastNode;
						if (_p3.ctor === 'Nothing') {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										bfs: A3(_user$project$Search$breadthFirstSearch, model.graph, _p2._0, _p3._0)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				case 'UpdateMastery':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Ports$updateMastery(model.mastery)
					};
				default:
					var _p4 = _p1._0;
					var graph = model.graph;
					var graph$ = A2(
						_elm_lang$core$Debug$log,
						'got values from smart sparrow: ',
						_elm_lang$core$Native_Utils.update(
							graph,
							{weighted: _p4.weighted, directed: _p4.directed}));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mastery: _p4.mastery, numerator: _p4.numerator, denominator: _p4.denominator, graph: graph$}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$Types$NewRandomValues,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
			}
		}
	});
var _user$project$GraphQuestions$init = A2(_user$project$GraphQuestions$update, _user$project$Types$Reset, _user$project$GraphQuestions$initModel);
var _user$project$GraphQuestions$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$GraphQuestions$init, view: _user$project$GraphQuestions$view, update: _user$project$GraphQuestions$update, subscriptions: _user$project$GraphQuestions$subscriptions})
};
