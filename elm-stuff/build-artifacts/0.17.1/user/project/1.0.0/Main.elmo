var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$view = function (model) {
	var resetBtn = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Types$Reset),
				_user$project$View$buttonStyle
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Reset')
			]));
	var buttons = model.debug ? A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				resetBtn,
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$ToggleWeighted),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Toggle Weighted')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$ToggleDirectional),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Toggle Directional')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Types$BreadthFirstSearch),
						_user$project$View$buttonStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('BFS')
					]))
			])) : A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[resetBtn]));
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h1,
				_elm_lang$core$Native_List.fromArray(
					[_user$project$View$scoreboardStyle]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Mastery Quiz')
					])),
				_user$project$GraphView$imageOfGraph(model),
				_user$project$QuestionView$questionForm(model),
				_user$project$HistoryView$historySection(model),
				buttons,
				A2(
				_elm_lang$html$Html$p,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model))
					]))
			]));
};
var _user$project$Main$initModel = {
	graph: _user$project$Types$emptyGraph,
	debug: true,
	userInput: '',
	history: A2(_elm_lang$core$List$repeat, _user$project$Types$historyLength, _elm_lang$core$Maybe$Nothing),
	bfs: _elm_lang$core$Maybe$Nothing,
	success: _elm_lang$core$Maybe$Nothing,
	question: _user$project$Types$emptyQuestion,
	feedback: '',
	randomValues: _elm_lang$core$Native_List.fromArray(
		[])
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = model.graph;
		var nodes = _p0.nodes;
		var edges = _p0.edges;
		var directional = _p0.directional;
		var weighted = _p0.weighted;
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$initModel,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$NewRandomValues,
						A2(
							_elm_lang$core$Random$list,
							15,
							A2(_elm_lang$core$Random$int, 1, 15)))
				};
			case 'NewRandomValues':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{randomValues: _p1._0}),
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$NewNodes,
						A2(
							_elm_lang$core$Random$list,
							15,
							A2(_elm_lang$core$Random$int, 1, 15)))
				};
			case 'NewNodes':
				var newNodes$ = _elm_lang$core$Set$toList(
					_elm_lang$core$Set$fromList(_p1._0));
				var newEdges = _user$project$Graph$createAllEdges(newNodes$);
				return {
					ctor: '_Tuple2',
					_0: A5(_user$project$Graph$updateGraph, model, newNodes$, newEdges, directional, weighted),
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$NewEdgeWeights,
						A2(
							_elm_lang$core$Random$list,
							_elm_lang$core$List$length(newEdges),
							A2(_elm_lang$core$Random$int, -2, 5)))
				};
			case 'NewEdgeWeights':
				var newEdges = A2(_user$project$Graph$replaceWeights, edges, _p1._0);
				return {
					ctor: '_Tuple2',
					_0: A5(_user$project$Graph$updateGraph, model, nodes, newEdges, directional, weighted),
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$NewQuestion,
						A2(_elm_lang$core$Random$int, 1, 8))
				};
			case 'NewQuestion':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Question$newQuestion, model, _p1._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UserInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{userInput: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Submit':
				return _elm_lang$core$String$isEmpty(model.userInput) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _user$project$Question$checkAnswer(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GiveFeedback':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$NewRandomValues,
						A2(
							_elm_lang$core$Random$list,
							15,
							A2(_elm_lang$core$Random$int, 1, 15)))
				};
			case 'ToggleWeighted':
				return {
					ctor: '_Tuple2',
					_0: A5(
						_user$project$Graph$updateGraph,
						model,
						nodes,
						edges,
						directional,
						_elm_lang$core$Basics$not(weighted)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleDirectional':
				return {
					ctor: '_Tuple2',
					_0: A5(
						_user$project$Graph$updateGraph,
						model,
						nodes,
						edges,
						_elm_lang$core$Basics$not(directional),
						weighted),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var lastNode = _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(nodes));
				var firstNode = _elm_lang$core$List$head(nodes);
				var _p2 = firstNode;
				if (_p2.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p3 = lastNode;
					if (_p3.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									bfs: A3(_user$project$Search$breadthFirstSearch, model.graph, _p2._0, _p3._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
		}
	});
var _user$project$Main$init = A2(_user$project$Main$update, _user$project$Types$Reset, _user$project$Main$initModel);
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
