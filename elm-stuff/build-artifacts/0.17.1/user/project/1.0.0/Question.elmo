var _user$project$Question$findFeedback = F3(
	function (answer, response, distractors) {
		findFeedback:
		while (true) {
			var _p0 = distractors;
			if (_p0.ctor === '[]') {
				return A2(_elm_lang$core$Basics_ops['++'], 'Incorrect. The answer is ', answer);
			} else {
				var _p1 = _p0._0;
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					response) || _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					'')) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$snd(_p1),
						A2(_elm_lang$core$Basics_ops['++'], ' The answer is ', answer));
				} else {
					var _v1 = answer,
						_v2 = response,
						_v3 = _p0._1;
					answer = _v1;
					response = _v2;
					distractors = _v3;
					continue findFeedback;
				}
			}
		}
	});
var _user$project$Question$checkAnswer = function (model) {
	var _p2 = model.question;
	var question = _p2.question;
	var distractors = _p2.distractors;
	var answer = _p2.answer;
	var newHistory = A2(_elm_lang$core$List$take, _user$project$Types$historyLength - 1, model.history);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Basics$fst(answer),
		model.userInput) ? _elm_lang$core$Native_Utils.update(
		model,
		{
			success: _elm_lang$core$Maybe$Just(true),
			history: A2(
				_elm_lang$core$List_ops['::'],
				_elm_lang$core$Maybe$Just(true),
				newHistory),
			feedback: _elm_lang$core$Basics$snd(answer)
		}) : _elm_lang$core$Native_Utils.update(
		model,
		{
			success: _elm_lang$core$Maybe$Just(false),
			history: A2(
				_elm_lang$core$List_ops['::'],
				_elm_lang$core$Maybe$Just(false),
				newHistory),
			feedback: A3(
				_user$project$Question$findFeedback,
				_elm_lang$core$Basics$fst(answer),
				model.userInput,
				distractors)
		});
};
var _user$project$Question$questionByIndex = F2(
	function (model, index) {
		var _p3 = model.graph;
		var nodes = _p3.nodes;
		var edges = _p3.edges;
		var directional = _p3.directional;
		var weighted = _p3.weighted;
		if (_elm_lang$core$Native_Utils.eq(index, 1)) {
			return {
				question: 'How many nodes are in the graph above?',
				distractors: _elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$toString(
							_user$project$Graph$numberOfEdges(model)),
						_1: 'That is the number of edges. Nodes are the labeled circles in the picture above.'
					},
						{ctor: '_Tuple2', _0: '', _1: 'Incorrect. Nodes are the labeled circles in the picture above. A node is still part of a graph even if it is not connected by an edge to any other nodes'}
					]),
				answer: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toString(
						_user$project$Graph$numberOfNodes(model)),
					_1: 'Correct.'
				},
				format: _user$project$Types$FillInTheBlank
			};
		} else {
			if (_elm_lang$core$Native_Utils.eq(index, 2)) {
				return {
					question: 'How many edges are in the graph above?',
					distractors: _elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Basics$toString(
								_user$project$Graph$numberOfNodes(model)),
							_1: 'That is the number of nodes. Edges are the lines connecting circles in the picture above. A bi-directional edge (i.e., an edge with two arrows) still counts as a single edge.'
						},
							{ctor: '_Tuple2', _0: '', _1: 'Incorrect. Edges are the lines connecting circles in the picture above. A bi-directional edge (i.e., an edge with two arrows) still counts as a single edge.'}
						]),
					answer: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$toString(
							_user$project$Graph$numberOfEdges(model)),
						_1: 'Correct.'
					},
					format: _user$project$Types$FillInTheBlank
				};
			} else {
				if (_elm_lang$core$Native_Utils.eq(index, 3)) {
					var l = _user$project$Graph$lastNode(model);
					var f = _user$project$Graph$firstNode(model);
					var ans = A3(_user$project$Search$pathExists, model.graph, f, l);
					var actualPath = A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A3(_user$project$Search$genericSearch, model.graph, f, l));
					var fbackString = ans ? A2(
						_elm_lang$core$Basics_ops['++'],
						'One valid path is ',
						_elm_lang$core$Basics$toString(actualPath)) : A2(
						_elm_lang$core$Basics_ops['++'],
						'There is no path from Node ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(f),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' to Node ',
								_elm_lang$core$Basics$toString(l))));
					return {
						question: A2(
							_elm_lang$core$Basics_ops['++'],
							'True or False: There is a path from Node ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(f),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' to Node ',
									_elm_lang$core$Basics$toString(l)))),
						distractors: _elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(
									_elm_lang$core$Basics$not(ans)),
								_1: A2(_elm_lang$core$Basics_ops['++'], 'Incorrect. ', fbackString)
							}
							]),
						answer: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Basics$toString(ans),
							_1: A2(_elm_lang$core$Basics_ops['++'], 'Correct. ', fbackString)
						},
						format: _user$project$Types$MultipleChoice
					};
				} else {
					if (_elm_lang$core$Native_Utils.eq(index, 4)) {
						var f = A2(
							_user$project$Graph$randomNode,
							model,
							_elm_lang$core$Native_List.fromArray(
								[]));
						var l = A2(
							_user$project$Graph$randomNode,
							model,
							_elm_lang$core$Native_List.fromArray(
								[f]));
						var ans = A3(_user$project$Graph$edgeExists, model.graph, f, l);
						var opposite = A3(_user$project$Graph$edgeExists, model.graph, l, f);
						var fbackString = ans ? A2(
							_elm_lang$core$Basics_ops['++'],
							'There is an edge from Node ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(f),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' to Node ',
									_elm_lang$core$Basics$toString(l)))) : (opposite ? A2(
							_elm_lang$core$Basics_ops['++'],
							'There is an not an edge from Node ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(f),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' to Node ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(l),
										A2(
											_elm_lang$core$Basics_ops['++'],
											', but there is an edge from Node ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(l),
												A2(
													_elm_lang$core$Basics_ops['++'],
													' to Node ',
													_elm_lang$core$Basics$toString(f)))))))) : A2(
							_elm_lang$core$Basics_ops['++'],
							'There is no edge between Node ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(f),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' and Node ',
									_elm_lang$core$Basics$toString(l)))));
						return {
							question: A2(
								_elm_lang$core$Basics_ops['++'],
								'True or False: There is an edge from Node ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(f),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' to Node ',
										_elm_lang$core$Basics$toString(l)))),
							distractors: _elm_lang$core$Native_List.fromArray(
								[
									{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toString(
										_elm_lang$core$Basics$not(ans)),
									_1: A2(_elm_lang$core$Basics_ops['++'], 'Incorrect. ', fbackString)
								}
								]),
							answer: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(ans),
								_1: A2(_elm_lang$core$Basics_ops['++'], 'Correct. ', fbackString)
							},
							format: _user$project$Types$MultipleChoice
						};
					} else {
						if (_elm_lang$core$Native_Utils.eq(index, 5) && directional) {
							var n = A2(
								_user$project$Graph$randomNode,
								model,
								_elm_lang$core$Native_List.fromArray(
									[]));
							var deg = A2(_user$project$Graph$degree, model.graph, n);
							var inDeg = A2(_user$project$Graph$inDegree, model.graph, n);
							var outDeg = A2(_user$project$Graph$outDegree, model.graph, n);
							return {
								question: A2(
									_elm_lang$core$Basics_ops['++'],
									'What is the in-degree of Node ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(n),
										'?')),
								distractors: _elm_lang$core$Native_List.fromArray(
									[
										{
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toString(deg),
										_1: 'Incorrect. You identified the number of edges entering and leaving the node (the degree). You should only count the number of edges entering the node (the in-degree)'
									},
										{
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toString(outDeg),
										_1: 'Incorrect. You identified the number of edges leaving the node (the out-degree), not the number of edges entering the node (the in-degree)'
									},
										{
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toString(inDeg + outDeg),
										_1: 'Incorrect. You double-counted the bi-directional edges.'
									},
										{ctor: '_Tuple2', _0: '', _1: 'Incorrect. A node\'s in-degree is the number of edges entering (to) the node. A bidirectional node only is counted once.'}
									]),
								answer: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toString(inDeg),
									_1: 'Correct.'
								},
								format: _user$project$Types$FillInTheBlank
							};
						} else {
							if (_elm_lang$core$Native_Utils.eq(index, 6) && directional) {
								var n = A2(
									_user$project$Graph$randomNode,
									model,
									_elm_lang$core$Native_List.fromArray(
										[]));
								var deg = A2(_user$project$Graph$degree, model.graph, n);
								var inDeg = A2(_user$project$Graph$inDegree, model.graph, n);
								var outDeg = A2(_user$project$Graph$outDegree, model.graph, n);
								return {
									question: A2(
										_elm_lang$core$Basics_ops['++'],
										'What is the out-degree of Node ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(n),
											'?')),
									distractors: _elm_lang$core$Native_List.fromArray(
										[
											{
											ctor: '_Tuple2',
											_0: _elm_lang$core$Basics$toString(deg),
											_1: 'Incorrect. You identified the number of edges entering and leaving the node (the degree). You should only count the number of edges leaving the node (the out-degree)'
										},
											{
											ctor: '_Tuple2',
											_0: _elm_lang$core$Basics$toString(inDeg),
											_1: 'Incorrect. You identified the number of edges entering the node (the in-degree), not the number of edges leaving the node (the out-degree)'
										},
											{
											ctor: '_Tuple2',
											_0: _elm_lang$core$Basics$toString(inDeg + outDeg),
											_1: 'Incorrect. You double-counted the bi-directional edges.'
										},
											{ctor: '_Tuple2', _0: '', _1: 'Incorrect. A node\'s out-degree is the number of edges leaving (from) the node. A bidirectional node only is counted once.'}
										]),
									answer: {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toString(outDeg),
										_1: 'Correct.'
									},
									format: _user$project$Types$FillInTheBlank
								};
							} else {
								if (_elm_lang$core$Native_Utils.eq(index, 7) && weighted) {
									var e = _user$project$Graph$randomEdge(model);
									var f = e.from;
									var t = e.to;
									var weight = e.weight;
									return {
										question: A2(
											_elm_lang$core$Basics_ops['++'],
											'What is the weight of the edge from Node ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(f),
												A2(
													_elm_lang$core$Basics_ops['++'],
													' to Node ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(t),
														'?')))),
										distractors: _elm_lang$core$Native_List.fromArray(
											[
												{ctor: '_Tuple2', _0: '', _1: 'Incorrect. An edge\'s weight is the number displayed on top of the edge.'}
											]),
										answer: {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Basics$toString(weight),
											_1: 'Correct.'
										},
										format: _user$project$Types$FillInTheBlank
									};
								} else {
									var n = A2(
										_user$project$Graph$randomNode,
										model,
										_elm_lang$core$Native_List.fromArray(
											[]));
									var deg = A2(_user$project$Graph$degree, model.graph, n);
									var inDeg = A2(_user$project$Graph$inDegree, model.graph, n);
									var outDeg = A2(_user$project$Graph$outDegree, model.graph, n);
									return {
										question: A2(
											_elm_lang$core$Basics_ops['++'],
											'What is the degree of Node ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(n),
												'?')),
										distractors: _elm_lang$core$Native_List.fromArray(
											[
												{
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toString(inDeg),
												_1: 'Incorrect. You identified the number of edges entering the node (the in-degree) but did not count the number of edges leaving the node (the out-degree)'
											},
												{
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toString(outDeg),
												_1: 'Incorrect. You identified the number of edges leaving the node (the out-degree) but did not count the number of edges entering the node (the in-degree)'
											},
												{
												ctor: '_Tuple2',
												_0: _elm_lang$core$Basics$toString(inDeg + outDeg),
												_1: 'Incorrect. You double-counted the bi-directional edges.'
											},
												{ctor: '_Tuple2', _0: '', _1: 'Incorrect. A node\'s degree is the number of edges entering (to) or exiting (from) the node. A bidirectional node only is only counted once.'}
											]),
										answer: {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Basics$toString(deg),
											_1: 'Correct.'
										},
										format: _user$project$Types$FillInTheBlank
									};
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Question$newQuestion = F2(
	function (model, index) {
		var newQuestion = A2(_user$project$Question$questionByIndex, model, index);
		var _p4 = model.graph;
		var nodes = _p4.nodes;
		var edges = _p4.edges;
		var directional = _p4.directional;
		var weighted = _p4.weighted;
		return _elm_lang$core$Native_Utils.update(
			model,
			{question: newQuestion, success: _elm_lang$core$Maybe$Nothing, userInput: ''});
	});
