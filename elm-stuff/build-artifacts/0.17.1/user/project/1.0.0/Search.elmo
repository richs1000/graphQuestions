var _user$project$Search$unwindSearchTree = F2(
	function (searchTree, lastNode) {
		unwindSearchTree:
		while (true) {
			var _p0 = searchTree;
			if (_p0.ctor === '[]') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var _p2 = _p0._1;
				var _p1 = _p0._0._0;
				if (A2(
					_elm_lang$core$List$member,
					lastNode,
					A2(_elm_lang$core$Debug$log, 'kids', _p0._0._1))) {
					return A2(
						_elm_lang$core$List_ops['::'],
						_p1,
						A2(_user$project$Search$unwindSearchTree, _p2, _p1));
				} else {
					var _v1 = _p2,
						_v2 = lastNode;
					searchTree = _v1;
					lastNode = _v2;
					continue unwindSearchTree;
				}
			}
		}
	});
var _user$project$Search$genericSearch = F3(
	function (graph, startNode, endNode) {
		var searchHelper = F3(
			function (openList, closedList, searchTree) {
				searchHelper:
				while (true) {
					var _p3 = openList;
					if (_p3.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p5 = _p3._0;
						if (_elm_lang$core$Native_Utils.eq(_p5, endNode)) {
							return _elm_lang$core$Maybe$Just(
								_elm_lang$core$List$reverse(
									A2(
										_elm_lang$core$List_ops['::'],
										endNode,
										A2(_user$project$Search$unwindSearchTree, searchTree, endNode))));
						} else {
							var neighbors = A2(
								_elm_lang$core$List$filter,
								function (n) {
									return _elm_lang$core$Basics$not(
										A3(_user$project$Graph$visited, openList, closedList, n));
								},
								A2(
									_elm_lang$core$List$filter,
									A2(_user$project$Graph$edgeExists, graph, _p5),
									graph.nodes));
							var openList$ = A2(_elm_lang$core$List$append, _p3._1, neighbors);
							var searchTree$ = A2(
								_elm_lang$core$Debug$log,
								'search tree: ',
								A2(
									_elm_lang$core$List_ops['::'],
									{ctor: '_Tuple2', _0: _p5, _1: neighbors},
									searchTree));
							var _p4 = neighbors;
							if (_p4.ctor === '[]') {
								var _v5 = openList$,
									_v6 = A2(_elm_lang$core$List_ops['::'], _p5, closedList),
									_v7 = searchTree$;
								openList = _v5;
								closedList = _v6;
								searchTree = _v7;
								continue searchHelper;
							} else {
								var _v8 = openList$,
									_v9 = A2(_elm_lang$core$List_ops['::'], _p5, closedList),
									_v10 = searchTree$;
								openList = _v8;
								closedList = _v9;
								searchTree = _v10;
								continue searchHelper;
							}
						}
					}
				}
			});
		return A3(
			searchHelper,
			_elm_lang$core$Native_List.fromArray(
				[startNode]),
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$Search$breadthFirstSearch = F3(
	function (graph, startNode, endNode) {
		return A3(_user$project$Search$genericSearch, graph, startNode, endNode);
	});
var _user$project$Search$pathExists = F3(
	function (graph, startNode, endNode) {
		var s = A3(_user$project$Search$breadthFirstSearch, graph, startNode, endNode);
		var _p6 = s;
		if (_p6.ctor === 'Nothing') {
			return false;
		} else {
			return true;
		}
	});
