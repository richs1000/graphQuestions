var _user$project$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p0 = model.graph;
			var nodes = _p0.nodes;
			var edges = _p0.edges;
			var directed = _p0.directed;
			var weighted = _p0.weighted;
			var nodesPerRow = _p0.nodesPerRow;
			var nodesPerCol = _p0.nodesPerCol;
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'Reset':
					return {
						ctor: '_Tuple2',
						_0: _user$project$Model$initModel,
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$MessageTypes$NewRandomValues,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
				case 'NewRandomValues':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{randomValues: _p1._0}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$MessageTypes$NewNodes,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
				case 'NewNodes':
					var newNodes$ = _elm_lang$core$Set$toList(
						_elm_lang$core$Set$fromList(_p1._0));
					var graph = model.graph;
					var graph$ = _user$project$Graph$createAllEdges(
						_elm_lang$core$Native_Utils.update(
							graph,
							{nodes: newNodes$}));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{graph: graph$}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$MessageTypes$NewEdgeWeights,
							A2(
								_elm_lang$core$Random$list,
								_elm_lang$core$List$length(graph$.edges),
								A2(_elm_lang$core$Random$int, -1, 5)))
					};
				case 'NewEdgeWeights':
					var graph$ = A2(_user$project$Graph$replaceWeights, model.graph, _p1._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{graph: graph$}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$MessageTypes$NewQuestion,
							A2(_elm_lang$core$Random$int, 1, 8))
					};
				case 'NewQuestion':
					var question$ = A3(_user$project$Question$newQuestion, model.graph, model.randomValues, _p1._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{question: question$, success: _elm_lang$core$Maybe$Nothing, userInput: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UserInput':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{userInput: _p1._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'Submit':
					if (_elm_lang$core$String$isEmpty(model.userInput)) {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p2 = model.question;
						var question = _p2.question;
						var distractors = _p2.distractors;
						var answer = _p2.answer;
						var newHistory = A2(_elm_lang$core$List$take, model.denominator - 1, model.history);
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$Basics$fst(answer),
							model.userInput) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									success: _elm_lang$core$Maybe$Just(true),
									history: A2(
										_elm_lang$core$List_ops['::'],
										_elm_lang$core$Maybe$Just(true),
										newHistory),
									feedback: _elm_lang$core$Basics$snd(answer)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									success: _elm_lang$core$Maybe$Just(false),
									history: A2(
										_elm_lang$core$List_ops['::'],
										_elm_lang$core$Maybe$Just(false),
										newHistory),
									feedback: A3(
										_user$project$Question$findFeedback,
										_elm_lang$core$Basics$fst(answer),
										model.userInput,
										distractors)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'GiveFeedback':
					var _v1 = _user$project$MessageTypes$CheckMastery,
						_v2 = model;
					msg = _v1;
					model = _v2;
					continue update;
				case 'CheckMastery':
					if (_user$project$Model$masteryAchieved(model)) {
						var _v3 = _user$project$MessageTypes$UpdateMastery,
							_v4 = _elm_lang$core$Native_Utils.update(
							model,
							{mastery: true});
						msg = _v3;
						model = _v4;
						continue update;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mastery: false}),
							_1: A2(
								_elm_lang$core$Random$generate,
								_user$project$MessageTypes$NewRandomValues,
								A2(
									_elm_lang$core$Random$list,
									15,
									A2(_elm_lang$core$Random$int, 1, 15)))
						};
					}
				case 'ToggleWeighted':
					var graph$ = A7(
						_user$project$Graph$updateGraph,
						model.graph,
						nodes,
						edges,
						directed,
						_elm_lang$core$Basics$not(weighted),
						nodesPerRow,
						nodesPerCol);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{graph: graph$}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ToggleDirectional':
					var graph$ = A7(
						_user$project$Graph$updateGraph,
						model.graph,
						nodes,
						edges,
						_elm_lang$core$Basics$not(directed),
						weighted,
						nodesPerRow,
						nodesPerCol);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{graph: graph$}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'BreadthFirstSearch':
					var lastNode = _elm_lang$core$List$head(
						_elm_lang$core$List$reverse(nodes));
					var firstNode = _elm_lang$core$List$head(nodes);
					var _p3 = firstNode;
					if (_p3.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p4 = lastNode;
						if (_p4.ctor === 'Nothing') {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										bfs: A3(_user$project$Search$breadthFirstSearch, model.graph, _p3._0, _p4._0)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				case 'UpdateMastery':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Ports$updateMastery(model.mastery)
					};
				default:
					var _p5 = _p1._0;
					var graph = model.graph;
					var graph$ = _elm_lang$core$Native_Utils.update(
						graph,
						{weighted: _p5.weighted, directed: _p5.directed});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mastery: _p5.mastery, numerator: _p5.numerator, denominator: _p5.denominator, implementMastery: _p5.implementMastery, graph: graph$, debug: _p5.debug}),
						_1: A2(
							_elm_lang$core$Random$generate,
							_user$project$MessageTypes$NewRandomValues,
							A2(
								_elm_lang$core$Random$list,
								15,
								A2(_elm_lang$core$Random$int, 1, 15)))
					};
			}
		}
	});
